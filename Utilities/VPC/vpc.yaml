# vedant's notes
# removed 3-4 AZ feature
# removed extra private subnet, NATs, route tables and associated Parameters
# removed vpc flow logs

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates a Multi-AZ, multi-subnet VPC infrastructure with
  managed NAT gateways in the public subnet for each availability zone.
  If you deploy this template in a region that doesn't
  support NAT gateways, NAT instances are deployed instead.
  **WARNING** This template creates AWS resources. You will be billed for the
  AWS resources used if you create a stack from this template.
Metadata:
  LICENSE: Apache License, Version 2.0
  QuickStartDocumentation:
    EntrypointName: Launch a new VPC
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Availability zone configuration
        Parameters:
          - AvailabilityZones
      - Label:
          default: Network configuration
        Parameters:
          - VPCCIDR
          - CreatePublicSubnets
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnetTag1
          - PublicSubnetTag2
          - PublicSubnetTag3
          - CreatePrivateSubnets
          - CreateNATGateways
          - PrivateSubnet1ACIDR
          - PrivateSubnet2ACIDR
          - PrivateSubnetATag1
          - PrivateSubnetATag2
          - PrivateSubnetATag3
          - VPCTenancy
    ParameterLabels:
      AvailabilityZones:
        default: Availability zones
      CreateNATGateways:
        default: Create NAT gateways
      CreatePrivateSubnets:
        default: Create private subnets
      CreatePublicSubnets:
        default: Create public subnets
      PrivateSubnet1ACIDR:
        default: Private subnet 1A CIDR
      PrivateSubnet2ACIDR:
        default: Private subnet 2A CIDR
      PrivateSubnetATag1:
        default: Tag pair 1 for private A subnets
      PrivateSubnetATag2:
        default: Tag pair 2 for private A subnets
      PrivateSubnetATag3:
        default: Tag pair 3 for private A subnets
      PublicSubnet1CIDR:
        default: Public subnet 1 CIDR
      PublicSubnet2CIDR:
        default: Public subnet 2 CIDR
      PublicSubnetTag1:
        default: Tag pair 1 for public subnets
      PublicSubnetTag2:
        default: Tag pair 2 for public subnets
      PublicSubnetTag3:
        default: Tag pair 3 for public subnets
      VPCCIDR:
        default: VPC CIDR
      VPCTenancy:
        default: VPC tenancy
Parameters:
  AvailabilityZones:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: >-
      List of Availability Zones to use for the subnets in the VPC, and the
      specified logical order is preserved.
  CreateNATGateways:
    Type: String
    Description: >-
      Choose false when creating only private subnets. If true, both
      CreatePublicSubnets and CreatePrivateSubnets must also be true.
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
  CreatePublicSubnets:
    Type: String
    Description: >-
      Choose false to create only private subnets. If false,
      CreatePrivateSubnets must be true and the CIDR parameters for all public
      subnets will be ignored.
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
  CreatePrivateSubnets:
    Type: String
    Description: >-
      Choose false to create only public subnets. If false, the CIDR parameters
      for all private subnets will be ignored.
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
  PrivateSubnet1ACIDR:
    Type: String
    Description: >-
      CIDR block for private subnet 1A located in availability zone 1.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: >-
      CIDR block parameter must be in the form x.x.x.x/16-28.
    Default: 10.0.0.0/19
  PrivateSubnet2ACIDR:
    Type: String
    Description: >-
      CIDR block for private subnet 2A located in availability zone 2.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: >-
      CIDR block parameter must be in the form x.x.x.x/16-28.
    Default: 10.0.32.0/19
  PrivateSubnetATag1:
    Type: String
    Description: >-
      (Optional) Tag to add to private subnets A, in format 'key=value'.
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: >-
      Tags must be in format 'key=value'. Keys can only contain
      [a-zA-Z0-9+\-._:/@]. Values can contain
      [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}].
    Default: Network=Private
  PrivateSubnetATag2:
    Type: String
    Description: >-
      (Optional) Tag to add to private subnets A, in format 'key=value'.
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: >-
      Tags must be in format 'key=value'. Keys can only contain
      [a-zA-Z0-9+\-._:/@]. Values can contain
      [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}].
    Default: ''
  PrivateSubnetATag3:
    Type: String
    Description: >-
      (Optional) Tag to add to private subnets A, in format 'key=value'.
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: >-
      Tags must be in format 'key=value'. Keys can only contain
      [a-zA-Z0-9+\-._:/@]. Values can contain
      [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}].
    Default: ''
  PublicSubnet1CIDR:
    Type: String
    Description: >-
      CIDR block for the public DMZ subnet 1 located in availability zone 1.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: >-
      CIDR block parameter must be in the form x.x.x.x/16-28.
    Default: 10.0.128.0/20
  PublicSubnet2CIDR:
    Type: String
    Description: >-
      CIDR block for the public DMZ subnet 2 located in availability zone 2.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: >-
      CIDR block parameter must be in the form x.x.x.x/16-28.
    Default: 10.0.144.0/20
  PublicSubnetTag1:
    Type: String
    Description: >-
      (Optional) Tag to add to public subnets, in format 'key=value'.
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: >-
      Tags must be in format 'key=value'. Keys can only contain
      [a-zA-Z0-9+\-._:/@]. Values can contain
      [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}].
    Default: Network=Public
  PublicSubnetTag2:
    Type: String
    Description: >-
      (Optional) Tag to add to public subnets, in format 'key=value'.
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: >-
      Tags must be in format 'key=value'. Keys can only contain
      [a-zA-Z0-9+\-._:/@]. Values can contain
      [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}].
    Default: ''
  PublicSubnetTag3:
    Type: String
    Description: >-
      (Optional) Tag to add to public subnets, in format 'key=value'.
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: >-
      Tags must be in format 'key=value'. Keys can only contain
      [a-zA-Z0-9+\-._:/@]. Values can contain
      [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}].
    Default: ''
  VPCCIDR:
    Type: String
    Description: CIDR block for the VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: >-
      CIDR block parameter must be in the form x.x.x.x/16-28.
    Default: 10.0.0.0/16
  VPCTenancy:
    Type: String
    Description: The allowed tenancy of instances launched into the VPC.
    AllowedValues:
      - default
      - dedicated
    Default: default
Rules:
  NAT:
    RuleCondition: !Equals [!Ref CreateNATGateways, 'true']
    Assertions:
      - Assert: !And
          - !Equals [!Ref CreatePrivateSubnets, 'true']
          - !Equals [!Ref CreatePublicSubnets, 'true']
        AssertDescription: >-
          To enable NAT gateways you must have both CreatePrivateSubnets and
          CreatePublicSubnets set to 'true'.
  Subnets:
    Assertions:
      - Assert: !Or
          - !Equals [!Ref CreatePrivateSubnets, 'true']
          - !Equals [!Ref CreatePublicSubnets, 'true']
        AssertDescription: >-
          At least one of CreatePublicSubnets or CreatePrivateSubnets must be
          set to 'true'.
Conditions:
  NATGatewaysCondition: !Equals [!Ref CreateNATGateways, 'true']
  NATGateways&PublicSubnets&PrivateSubnetsCondition: !And
    - !Condition NATGatewaysCondition
    - !Condition PublicSubnetsCondition
    - !Condition PrivateSubnetsCondition
  NVirginiaRegionCondition: !Equals [!Ref AWS::Region, us-east-1]
  PrivateSubnetsCondition: !Equals [!Ref CreatePrivateSubnets, 'true']
  PublicSubnetsCondition: !Equals [!Ref CreatePublicSubnets, 'true']
  PrivateSubnetATag1Condition: !Not [!Equals [!Ref PrivateSubnetATag1, '']]
  PrivateSubnetATag2Condition: !Not [!Equals [!Ref PrivateSubnetATag2, '']]
  PrivateSubnetATag3Condition: !Not [!Equals [!Ref PrivateSubnetATag3, '']]
  PublicSubnetTag1Condition: !Not [!Equals [!Ref PublicSubnetTag1, '']]
  PublicSubnetTag2Condition: !Not [!Equals [!Ref PublicSubnetTag2, '']]
  PublicSubnetTag3Condition: !Not [!Equals [!Ref PublicSubnetTag3, '']]
Resources:
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !If [NVirginiaRegionCondition, ec2.internal, !Sub '${AWS::Region}.compute.internal']
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} stack DHCPOptions
        - Key: StackName
          Value: !Ref AWS::StackName
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      InstanceTenancy: !Ref VPCTenancy
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions
  InternetGateway:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  VPCGatewayAttachment:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PrivateSubnet1A:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1ACIDR
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: Private subnet 1A
        - !If
          - PrivateSubnetATag1Condition
          - Key: !Select [0, !Split ['=', !Ref PrivateSubnetATag1]]
            Value: !Select [1, !Split ['=', !Ref PrivateSubnetATag1]]
          - !Ref AWS::NoValue
        - !If
          - PrivateSubnetATag2Condition
          - Key: !Select [0, !Split ['=', !Ref PrivateSubnetATag2]]
            Value: !Select [1, !Split ['=', !Ref PrivateSubnetATag2]]
          - !Ref AWS::NoValue
        - !If
          - PrivateSubnetATag3Condition
          - Key: !Select [0, !Split ['=', !Ref PrivateSubnetATag3]]
            Value: !Select [1, !Split ['=', !Ref PrivateSubnetATag3]]
          - !Ref AWS::NoValue
  PrivateSubnet2A:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2ACIDR
      AvailabilityZone: !Select [1, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: Private subnet 2A
        - !If
          - PrivateSubnetATag1Condition
          - Key: !Select [0, !Split ['=', !Ref PrivateSubnetATag1]]
            Value: !Select [1, !Split ['=', !Ref PrivateSubnetATag1]]
          - !Ref AWS::NoValue
        - !If
          - PrivateSubnetATag2Condition
          - Key: !Select [0, !Split ['=', !Ref PrivateSubnetATag2]]
            Value: !Select [1, !Split ['=', !Ref PrivateSubnetATag2]]
          - !Ref AWS::NoValue
        - !If
          - PrivateSubnetATag3Condition
          - Key: !Select [0, !Split ['=', !Ref PrivateSubnetATag3]]
            Value: !Select [1, !Split ['=', !Ref PrivateSubnetATag3]]
          - !Ref AWS::NoValue
  PublicSubnet1:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::Subnet
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: >-
              (W33) EC2 Subnet should not have MapPublicIpOnLaunch set to true.
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: Public subnet 1
        - !If
          - PublicSubnetTag1Condition
          - Key: !Select [0, !Split ['=', !Ref PublicSubnetTag1]]
            Value: !Select [1, !Split ['=', !Ref PublicSubnetTag1]]
          - !Ref AWS::NoValue
        - !If
          - PublicSubnetTag2Condition
          - Key: !Select [0, !Split ['=', !Ref PublicSubnetTag2]]
            Value: !Select [1, !Split ['=', !Ref PublicSubnetTag2]]
          - !Ref AWS::NoValue
        - !If
          - PublicSubnetTag3Condition
          - Key: !Select [0, !Split ['=', !Ref PublicSubnetTag3]]
            Value: !Select [1, !Split ['=', !Ref PublicSubnetTag3]]
          - !Ref AWS::NoValue
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::Subnet
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: >-
              (W33) EC2 Subnet should not have MapPublicIpOnLaunch set to true.
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [1, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: Public subnet 2
        - !If
          - PublicSubnetTag1Condition
          - Key: !Select [0, !Split ['=', !Ref PublicSubnetTag1]]
            Value: !Select [1, !Split ['=', !Ref PublicSubnetTag1]]
          - !Ref AWS::NoValue
        - !If
          - PublicSubnetTag2Condition
          - Key: !Select [0, !Split ['=', !Ref PublicSubnetTag2]]
            Value: !Select [1, !Split ['=', !Ref PublicSubnetTag2]]
          - !Ref AWS::NoValue
        - !If
          - PublicSubnetTag3Condition
          - Key: !Select [0, !Split ['=', !Ref PublicSubnetTag3]]
            Value: !Select [1, !Split ['=', !Ref PublicSubnetTag3]]
          - !Ref AWS::NoValue
      MapPublicIpOnLaunch: true
  PrivateSubnet1ARouteTable:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private subnet 1A
        - Key: Network
          Value: Private
  PrivateSubnet1ARoute:
    Condition: NATGateways&PublicSubnets&PrivateSubnetsCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1ARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1
  PrivateSubnet1ARouteTableAssociation:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1A
      RouteTableId: !Ref PrivateSubnet1ARouteTable
  PrivateSubnet2ARouteTable:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private subnet 2A
        - Key: Network
          Value: Private
  PrivateSubnet2ARoute:
    Condition: NATGateways&PublicSubnets&PrivateSubnetsCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2ARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2
  PrivateSubnet2ARouteTableAssociation:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2A
      RouteTableId: !Ref PrivateSubnet2ARouteTable
  PublicSubnetRouteTable:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public
  PublicSubnetRoute:
    Condition: PublicSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicSubnet2RouteTableAssociation:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable
  NAT1EIP:
    Condition: NATGateways&PublicSubnets&PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NAT1EIP
  NAT2EIP:
    Condition: NATGateways&PublicSubnets&PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NAT2EIP
  NATGateway1:
    Condition: NATGateways&PublicSubnets&PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NAT1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NATGateway1
  NATGateway2:
    Condition: NATGateways&PublicSubnets&PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NAT2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: NATGateway2
  S3VPCEndpoint:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::VPCEndpoint
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EPolicyWildcardPrincipal
          ignore_reasons:
            EIAMPolicyActionWildcard: >-
              This is based on AWS documentation- filtering via bucket policy
              is generally preferred.
            EIAMPolicyWildcardResource: >-
              This is based on AWS documentation- filtering via bucket policy
              is generally preferred.
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - !Ref PrivateSubnet1ARouteTable
        - !Ref PrivateSubnet2ARouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
Outputs:
  NAT1EIP:
    Condition: NATGateways&PublicSubnets&PrivateSubnetsCondition
    Description: NAT 1 IP address.
    Value: !Ref NAT1EIP
    Export:
      Name: !Sub ${AWS::StackName}-NAT1EIP
  NAT2EIP:
    Condition: NATGateways&PublicSubnets&PrivateSubnetsCondition
    Description: NAT 2 IP address.
    Value: !Ref NAT2EIP
    Export:
      Name: !Sub ${AWS::StackName}-NAT2EIP
  NATGateway1ID:
    Condition: NATGateways&PublicSubnets&PrivateSubnetsCondition
    Description: NATGateway 1 ID.
    Value: !Ref NATGateway1
    Export:
      Name: !Sub ${AWS::StackName}-NATGateway1
  NATGateway2ID:
    Condition: NATGateways&PublicSubnets&PrivateSubnetsCondition
    Description: NATGateway 2 ID.
    Value: !Ref NATGateway2
    Export:
      Name: !Sub ${AWS::StackName}-NATGateway2
  PrivateSubnet1ACIDR:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 1A CIDR in availability zone 1.
    Value: !Ref PrivateSubnet1ACIDR
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1ACIDR
  PrivateSubnet1AID:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 1A ID in availability zone 1.
    Value: !Ref PrivateSubnet1A
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1AID
  PrivateSubnet1ARouteTable:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 1A route table.
    Value: !Ref PrivateSubnet1ARouteTable
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1ARouteTable
  PrivateSubnet2ACIDR:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 2A CIDR in availability zone 2.
    Value: !Ref PrivateSubnet2ACIDR
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2ACIDR
  PrivateSubnet2AID:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 2A ID in availability zone 2.
    Value: !Ref PrivateSubnet2A
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2AID
  PrivateSubnet2ARouteTable:
    Condition: PrivateSubnetsCondition
    Value: !Ref PrivateSubnet2ARouteTable
    Description: Private subnet 2A route table.
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2ARouteTable
  PublicSubnet1CIDR:
    Condition: PublicSubnetsCondition
    Description: Public subnet 1 CIDR in availability zone 1.
    Value: !Ref PublicSubnet1CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1CIDR
  PublicSubnet1ID:
    Condition: PublicSubnetsCondition
    Description: Public subnet 1 ID in availability zone 1.
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1ID
  PublicSubnet2CIDR:
    Condition: PublicSubnetsCondition
    Description: Public subnet 2 CIDR in availability zone 2.
    Value: !Ref PublicSubnet2CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2CIDR
  PublicSubnet2ID:
    Condition: PublicSubnetsCondition
    Description: Public subnet 2 ID in availability zone 2.
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2ID
  PublicSubnetRouteTable:
    Condition: PublicSubnetsCondition
    Description: Public subnet route table.
    Value: !Ref PublicSubnetRouteTable
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetRouteTable
  S3VPCEndpoint:
    Condition: PrivateSubnetsCondition
    Description: S3 VPC Endpoint.
    Value: !Ref S3VPCEndpoint
    Export:
      Name: !Sub ${AWS::StackName}-S3VPCEndpoint
  VPCCIDR:
    Description: VPC CIDR.
    Value: !Ref VPCCIDR
    Export:
      Name: !Sub ${AWS::StackName}-VPCCIDR
  VPCID:
    Description: VPC ID.
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCID
